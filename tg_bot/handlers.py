import logging
import httpx
from aiogram import types
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from logger import file_handler, console_handler
from bot_init import bot, dp


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

API_URL = 'http://localhost:8975'


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç!\n'
                        '–Ø - NATASHA, '
                        '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RUTUBE.\n'
                        '–ü–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏ —è –Ω–∞–π–¥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç!')


@dp.message()
async def answer_for_all_question(message: types.Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        text = message.text
        logger.info(f'Q: {text}')

        if text.startswith('/'):
            await message.reply('–Ø –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start. '
                                '–ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É!')
            return

        data = {'question': text}

        async with httpx.AsyncClient() as client:
            response = await client.post(API_URL + '/predict', json=data, timeout=300)
            response_data = response.json()

        answer = response_data['answer']
        if answer == "":
            answer = "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
        logger.info(f'A: {answer}')

        keyboard_markup = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text='üëç', callback_data='feedback_good'),
                InlineKeyboardButton(text='üëé', callback_data='feedback_bad'),
            ]]
        )
        await message.reply(answer, reply_markup=keyboard_markup)


@dp.callback_query(lambda c: c.data and c.data.startswith("feedback"))
async def save_feedback(callback_query: types.CallbackQuery):
    logger.info(f'Callback: {callback_query.data}')

    answer_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!'
    match callback_query.data:
        case 'feedback_good':
            answer_text += ' –†–∞–¥–∞ –ø–æ–º–æ—á—å!'
        case 'feedback_bad':
            answer_text += ' –ë—É–¥—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!'

    await callback_query.answer(answer_text)
    await callback_query.message.edit_reply_markup(None)
